<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/05/14/New%20Document/"/>
      <url>/2019/05/14/New%20Document/</url>
      
        <content type="html"><![CDATA[<h2 id="ISCC部分题解"><a href="#ISCC部分题解" class="headerlink" title="ISCC部分题解"></a>ISCC部分题解</h2><hr><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>三位数字密码可以使用burpsuite直接爆破，唯一难点为验证码绕过操作如下：</p><p>1.打开链接输入信息抓包<br><img src="https://i.imgur.com/EjBhTKJ.png" alt=""></p><p><img src="https://i.imgur.com/w1ahsA7.png" alt=""></p><p>2.将 PHPSESSID=与user_code=后面的数据删掉，放到intruder三位数字爆破即可</p><p><img src="https://i.imgur.com/zQqo6wS.png" alt=""></p><p>提示：尝试密码时返回界面乱码，可以使用firefox：菜单-定制-文字编码，放到工具栏中，然后转Unicode格式</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>1.w3lc0me_To_ISCC2019 转10进制：</p><p>119 51 108 99 48 109 101 95 84 111 95 73 83 67 67 50 48 49 57 </p><p>2.要求值小于2333，加一还大于2333，利用了inval函数，使用十六进制，值为<br>“0x91f”,2333的十六进制为0x91d,2334的十六进制0x91e</p><p>intval使用注意（如果第一位不为0，则不需要考虑3，4，5的情况）：</p><p>（1）作用于数组时当数组为空，返回值是0，不为空则为1<br>（2）只是获取变量的整型值（截取变量的整数部分，直接舍去小数）<br>（3）不管变量前面有多少个0，且数字都小于8，它会当作是八进制数转换成十进制数 077&gt;63<br>（4）如果变量前面有0，后面的有效位第一位不小于8，则输出为0   087&gt;0<br>（5）如果变量前面有0，后面的有效位从第二位不大于8，则只输出前面的有效位  0729&gt;72<br>（6）（“100”，2）&gt;4,引号里面的数字输出其二进制，第一个参数必须加引号<br>（7）（十六进制）&gt;十进制</p><p>3.传值</p><p>（1）要求value数组值小于32，大于127才可以输出flag，所以使用mod256原理，每个十进制数字加上256，然后传值，它会自动mod256<br>（2）数组传值只能数组名重复一个一个传，“value[]=x”,数据之间用&amp;相连接。</p><h3 id="Misc1-隐藏的信息"><a href="#Misc1-隐藏的信息" class="headerlink" title="Misc1 隐藏的信息"></a>Misc1 隐藏的信息</h3><p>1.下载解压，是一个txt文件</p><p>2.文件中数字的表示方式为8进制，所以将所有的数字转化为ASCII字符，再base64解码</p><h3 id="MISC2-倒立屋"><a href="#MISC2-倒立屋" class="headerlink" title="MISC2 倒立屋"></a>MISC2 倒立屋</h3><p>1.下载解压，一个png格式图片，所以放到Stegsolve中。</p><p>2.next没有发现，再data extract中提取数据，发现疑似flag的字符串，图片名字为倒立屋，将字符串倒置为flag。</p><h3 id="Misc4-Aesop’s-secret"><a href="#Misc4-Aesop’s-secret" class="headerlink" title="Misc4   Aesop’s secret"></a>Misc4   Aesop’s secret</h3><p>1.下载打开是一张gif图片，里面好像有数据，不过速度太快无法看清，放到stegsolve中使用frame bowser分帧。</p><p>2.发现数据很像二维码，将分帧的图片全部分别保存使用image combiner功能拼接，不是二维码，中间数据为“iscc”。</p><p>3.想到文件名为Aesop，联想到AES加密，“iscc”应该为加密密钥，现在需要找到编码后的字符串。</p><p>4.在file format 中找到了一串字符，疑似编码，我们使用ase解码两次，找到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ping命令注入</title>
      <link href="/2019/04/26/ping%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/04/26/ping%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>1.在使用ping命令，如果对方没有wsf，可以使用注入，使用符号截断，常见的符号：<br>$’<br>‘;’<br>‘|’<br>‘-’<br>‘(’<br>‘)’<br>‘反引号’<br>‘||’<br>‘&amp;&amp;’<br>‘&amp;’<br>‘}’<br>‘{’</p><p>几个命令： ls ,cat&lt; ,cat</p><p>格式：ip=127.0.0.1;cat /home/flag.txt</p><p>一般flag.txt在home目录下，可以尝试一下</p><p>此类命令执行函数依赖PHP配置文件的设置，如果配置选项 safe_mode 设置为 off，此类命令不可执行，必须设置为 On<br>的情况下，才可执行。PHP 默认是关闭的。</p><p>2.vim中的swp即swap（交换分区）的简写，在编辑文件时产生，它是隐藏文件。这个文件是一个临时交换文件，用来备份缓冲区中的内容。</p><p>当你用多个程序编辑同一个文件时选择readonly</p><p>非常规退出时<br>当强行关闭vi时，比如电源突然断掉或者你使用了Ctrl+ZZ，vi自动生成一个.swp文件，下次再编辑时就会出现一些提示。</p><p>命令： vi -r xxx.c 恢复；rm -rf xxx.swp 删除防止下一次弹出</p><p>在vim配置中设置：</p><p>禁止产生：set noswapfile</p><p>同意产生：set noswapfile</p><p>3.挂载命令 mount 光盘 目录</p><p>strngs 光盘 | grep flag  匹配</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建及部分问题</title>
      <link href="/2019/04/03/hexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/03/hexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h1><p>请参考这个链接<a href="http://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">http://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><a id="more"></a><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>在生成以及部署文章之前，需要安装一个扩展，命令：npm install hexo-deployer-git –save，使用这个命令可能会出现“A complete log of this run can be fund in: C\Users\用户\AppData\Roaming\npm-cache_logs\2018-9-24T10_55_24_806Z-debug.log”这个错误，这是由于项目中多次安装模板失败引起，解决方法：</p><ol><li>将node_modules文件删除（本人亲试，不删除好像也可以）</li><li>输入命令：npm cache clean –force 清楚缓存</li><li>输入命令：npm install 重新安装一次</li></ol><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>在生成新文章之后使用“hexo d -g”命令部署文章到github中，可能会出现这样的情况“warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF”这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。而git提供了一个换行符检查功能：</p><ol><li>false 不做任何检查</li><li>warn  在提交时检查并警告</li><li>true  在提交时检查，如果发现混用则拒绝</li></ol><p>解决办法：</p><p>输入命令：git config –global core.autocrlf false</p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p>部署完文章打开网站却没有显示，这是因为需要时间缓冲不能立即成功，可以在输入命令“hexo d -g”之前输入“hexo clean”,先清除缓存，可以快速部署成功。</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><p><img src="https://img2018.cnblogs.com/blog/1442702/201904/1442702-20190403230312023-1949033585.jpg" alt=""></p><p>hexo d是发布到github的命令，目测你的错误是链接到github超时。https的默认端口是443 可能是因为网速的原因，可以再次尝试。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
